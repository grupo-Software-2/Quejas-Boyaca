name: Release

on:
  push:
    branches:
      - 'main'
      - 'feat/*'
      - 'fix/*'
      - 'hotfix/*'
      - 'refactor/*'
      - 'test/*'
      - 'chore/*'
      - 'docs/*'
      - 'style/*'
      - 'build/*'
      - 'ci/*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git fetch --tags
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$tag" >> $GITHUB_ENV

      - name: Generate filtered changelog
        id: changelog
        run: |
          echo "## Changelog" > changelog.txt
          echo "" >> changelog.txt

          # Filtra commits que sigan el formato PREFIX(QUEJAS-XX): Nombre
          git log ${{ env.latest_tag }}..HEAD --pretty=format:"- %s (%an)" \
            | grep -E "^(feat|fix|hotfix|refactor|test|chore|docs|style|build|ci)\(QUEJAS-[0-9]+\):" \
            >> changelog.txt || echo "No hay commits vÃ¡lidos con el formato esperado." >> changelog.txt

          echo "" >> changelog.txt
          cat changelog.txt

      - name: Bump version (auto increment patch)
        id: version
        run: |
          latest="${{ env.latest_tag }}"
          echo "Latest tag: $latest"
          version=$(echo $latest | sed 's/v//')
          IFS='.' read -r major minor patch <<< "$version"

          # Incrementa el patch hasta que el tag no exista
          while git rev-parse "v$major.$minor.$patch" >/dev/null 2>&1; do
            patch=$((patch + 1))
          done

          new_version="v$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "New version: $new_version"

      - name: Create new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.new_version }}
          name: Release ${{ env.new_version }}
          body_path: changelog.txt
          draft: false
          prerelease: false